import random

citys = [
    (0, 3), (0, 0), (0, 2), (0, 1),
    (1, 0), (1, 3), (2, 0), (2, 3),
    (3, 0), (3, 3), (3, 1), (3, 2)
]

# 初始路徑
l = len(citys)
path = [(i + 1) % l for i in range(l)]
print("初始路徑:", path)

def distance(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

def pathLength(p):
    dist = 0
    plen = len(p)
    for i in range(plen):
        dist += distance(citys[p[i]], citys[p[(i + 1) % plen]])
    return dist

print("初始路徑長度:", pathLength(path))

def swap_random_elements(p):
    idx1, idx2 = random.sample(range(len(p)), 2)
    new_p = p[:]
    new_p[idx1], new_p[idx2] = new_p[idx2], new_p[idx1]
    return new_p

def hill_climbing(initial_path, max_iterations):
    current_path = initial_path
    current_length = pathLength(current_path)
    
    for iteration in range(max_iterations):
        neighbor_path = swap_random_elements(current_path)
        neighbor_length = pathLength(neighbor_path)
        
        if neighbor_length < current_length:
            current_path = neighbor_path
            current_length = neighbor_length
        
        # 打印當前狀態
        print(f"迭代 {iteration + 1}: 路徑 = {current_path}, 路徑長度 = {current_length}")
    
    return current_path, current_length

# 設置參數
max_iterations = 1000

# 運行算法
best_path, best_length = hill_climbing(path, max_iterations)
print(f"最佳路徑: {best_path}, 最短路徑長度: {best_length}")
